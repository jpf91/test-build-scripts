{
    "host": "x86_64-unknown-linux-gnu",
    "target": "x86_64-unknown-linux-gnu",
    "arch": "x86",
    "sysroot_prefix": "/usr",

    "constants": {
        "all": {
            "BUGURL": "--with-bugurl=https://bugzilla.gdcproject.org",
            "PKGVERSION": "gdcproject.org",
            "MULTILIB_FLAGS": "-with-multilib-list=m32,m64 --enable-multilib",
            "BOOTSTRAP_LN_32": "",
            "BOOTSTRAP_LN_64": "",
            "MAKE_LIB_DIR": "",
            "BUILD_TOOLPREFIX": "x86_64_build-unknown-linux-gnu",
            "BUILD_COMPILER_FLAGS": "",
            "HOST_TOOLPREFIX": "set-in-cmd",
            "HOST_COMPILER_FLAGS": "",
            "TARGET_TOOLPREFIX": "x86_64-unknown-linux-gnu",
            "TARGET_COMPILER_FLAGS": "",
            "BUILD_TOOLS": "CC_FOR_BUILD='${BUILD_TOOLPREFIX}-gcc ${BUILD_COMPILER_FLAGS}' CXX_FOR_BUILD='${BUILD_TOOLPREFIX}-g++ ${BUILD_COMPILER_FLAGS}' GCC_FOR_BUILD='${BUILD_TOOLPREFIX}-gcc ${BUILD_COMPILER_FLAGS}' GCJ_FOR_BUILD='${BUILD_TOOLPREFIX}-gcj ${BUILD_COMPILER_FLAGS}' GFORTRAN_FOR_BUILD='${BUILD_TOOLPREFIX}-gfortran ${BUILD_COMPILER_FLAGS}' GOC_FOR_BUILD='${BUILD_TOOLPREFIX}-gccgo ${BUILD_COMPILER_FLAGS}' GDC_FOR_BUILD='${BUILD_TOOLPREFIX}-gdc ${BUILD_COMPILER_FLAGS}' AR_FOR_BUILD='${BUILD_TOOLPREFIX}-ar' AS_FOR_BUILD='${BUILD_TOOLPREFIX}-as' DLLTOOL_FOR_BUILD='${BUILD_TOOLPREFIX}-dlltool' LD_FOR_BUILD='${BUILD_TOOLPREFIX}-ld' LIPO_FOR_BUILD='${BUILD_TOOLPREFIX}-lipo' NM_FOR_BUILD='${BUILD_TOOLPREFIX}-nm' OBJCOPY_FOR_BUILD='${BUILD_TOOLPREFIX}-objcopy' OBJDUMP_FOR_BUILD='${BUILD_TOOLPREFIX}-objdump' RANLIB_FOR_BUILD='${BUILD_TOOLPREFIX}-ranlib' READELF_FOR_BUILD='${BUILD_TOOLPREFIX}-readelf' STRIP_FOR_BUILD='${BUILD_TOOLPREFIX}-strip' WINDRES_FOR_BUILD='${BUILD_TOOLPREFIX}-windres' WINDMC_FOR_BUILD='${BUILD_TOOLPREFIX}-windmc'",
            "HOST_TOOLS": "CC='${HOST_TOOLPREFIX}-gcc ${HOST_COMPILER_FLAGS}' CXX='${HOST_TOOLPREFIX}-g++ ${HOST_COMPILER_FLAGS}' GCC='${HOST_TOOLPREFIX}-gcc ${HOST_COMPILER_FLAGS}' GCJ='${HOST_TOOLPREFIX}-gcj ${HOST_COMPILER_FLAGS}' GFORTRAN='${HOST_TOOLPREFIX}-gfortran ${HOST_COMPILER_FLAGS}' GOC='${HOST_TOOLPREFIX}-gccgo ${HOST_COMPILER_FLAGS}' GDC='${HOST_TOOLPREFIX}-gdc ${HOST_COMPILER_FLAGS}' AR='${HOST_TOOLPREFIX}-ar' AS='${HOST_TOOLPREFIX}-as' DLLTOOL='${HOST_TOOLPREFIX}-dlltool' LD='${HOST_TOOLPREFIX}-ld' LIPO='${HOST_TOOLPREFIX}-lipo' NM='${HOST_TOOLPREFIX}-nm' OBJCOPY='${HOST_TOOLPREFIX}-objcopy' OBJDUMP='${HOST_TOOLPREFIX}-objdump' RANLIB='${HOST_TOOLPREFIX}-ranlib' READELF='${HOST_TOOLPREFIX}-readelf' STRIP='${HOST_TOOLPREFIX}-strip' WINDRES='${HOST_TOOLPREFIX}-windres' WINDMC='${HOST_TOOLPREFIX}-windmc'",
            "TARGET_TOOLS": "CC_FOR_TARGET='${TARGET_TOOLPREFIX}-gcc ${TARGET_COMPILER_FLAGS}' CXX_FOR_TARGET='${TARGET_TOOLPREFIX}-g++ ${TARGET_COMPILER_FLAGS}' GCC_FOR_TARGET='${TARGET_TOOLPREFIX}-gcc ${TARGET_COMPILER_FLAGS}' GCJ_FOR_TARGET='${TARGET_TOOLPREFIX}-gcj ${TARGET_COMPILER_FLAGS}' GFORTRAN_FOR_TARGET='${TARGET_TOOLPREFIX}-gfortran ${TARGET_COMPILER_FLAGS}' GOC_FOR_TARGET='${TARGET_TOOLPREFIX}-gccgo ${TARGET_COMPILER_FLAGS}' GDC_FOR_TARGET='${TARGET_TOOLPREFIX}-gdc ${TARGET_COMPILER_FLAGS}' AR_FOR_TARGET='${TARGET_TOOLPREFIX}-ar' AS_FOR_TARGET='${TARGET_TOOLPREFIX}-as' DLLTOOL_FOR_TARGET='${TARGET_TOOLPREFIX}-dlltool' LD_FOR_TARGET='${TARGET_TOOLPREFIX}-ld' LIPO_FOR_TARGET='${TARGET_TOOLPREFIX}-lipo' NM_FOR_TARGET='${TARGET_TOOLPREFIX}-nm' OBJCOPY_FOR_TARGET='${TARGET_TOOLPREFIX}-objcopy' OBJDUMP_FOR_TARGET='${TARGET_TOOLPREFIX}-objdump' RANLIB_FOR_TARGET='${TARGET_TOOLPREFIX}-ranlib' READELF_FOR_TARGET='${TARGET_TOOLPREFIX}-readelf' STRIP_FOR_TARGET='${TARGET_TOOLPREFIX}-strip' WINDRES_FOR_TARGET='${TARGET_TOOLPREFIX}-windres' WINDMC_FOR_TARGET='${TARGET_TOOLPREFIX}-windmc'",
            "ALL_TOOLS": "${BUILD_TOOLS} ${HOST_TOOLS} ${TARGET_TOOLS}"
        },
        "native": {
            "NATIVE_CROSS_SYSROOT": "/home/build/share/host-toolchains/x86_64-unknown-linux-gnu/sysroot/",
            "SYSROOT_FLAGS": "--with-build-sysroot=${NATIVE_CROSS_SYSROOT}",
            "SYSROOT_BINUTILS_FLAGS": "",
            "HOST_TOOLS": "",
            "TARGET_TOOLS": ""
        },
        "cross": {
            "BOOTSTRAP_LN_32": "ln -vs libgcc.a `x86_64-unknown-linux-gnu-gcc -m32 -print-libgcc-file-name | sed 's/libgcc/&_eh/'`",
            "BOOTSTRAP_LN_64": "ln -vs libgcc.a `x86_64-unknown-linux-gnu-gcc -print-libgcc-file-name | sed 's/libgcc/&_eh/'`",
            "MAKE_LIB_DIR": "mkdir -p ${DIR_SYSROOT}/usr/lib32 ${DIR_SYSROOT}/usr/lib ${DIR_SYSROOT}/lib",
            "SYSROOT_FLAGS": "--with-sysroot=${DIR_SYSROOT} --with-native-system-header-dir=/usr/include",
            "SYSROOT_BINUTILS_FLAGS": "--with-sysroot=${DIR_SYSROOT}"
        },
        "canadian": {
            "MAKE_LIB_DIR": "mkdir -p ${DIR_SYSROOT}/usr/lib32 ${DIR_SYSROOT}/usr/lib ${DIR_SYSROOT}/lib",
            "SYSROOT_FLAGS": "--with-sysroot=${DIR_SYSROOT} --with-native-system-header-dir=/usr/include",
            "SYSROOT_BINUTILS_FLAGS": "--with-sysroot=${DIR_SYSROOT}"
        }
    },

    "build": {
        "all": {
            "gmp": {
                "commands": [
                    "${CONFIGURE} ${ALL_TOOLS} --prefix=${DIR_GMP_INSTALL} --host=${HOST} --disable-shared",
                    "make -j${NUM_CPU}",
                    "make install"
                ]
            },
            "mpfr": {
                "commands": [
                    "${CONFIGURE} ${ALL_TOOLS} --prefix=${DIR_MPFR_INSTALL} --host=${HOST} --disable-shared --with-gmp=${DIR_GMP_INSTALL}",
                    "make -j${NUM_CPU}",
                    "make install"
                ]
            },
            "mpc": {
                "commands": [
                    "${CONFIGURE} ${ALL_TOOLS} --prefix=${DIR_MPC_INSTALL} --host=${HOST} --disable-shared --with-gmp=${DIR_GMP_INSTALL} --with-mpfr=${DIR_MPFR_INSTALL}",
                    "make -j${NUM_CPU}",
                    "make install"
                ]
            },
            "linux": {
                "commands": [
                    "make HOSTCC='x86_64_build-unknown-linux-gnu-gcc' ARCH=${ARCH} headers_check",
                    "make HOSTCC='x86_64_build-unknown-linux-gnu-gcc' ARCH=${ARCH} INSTALL_HDR_PATH=${DIR_SYSROOT_WITH_PREFIX} headers_install"
                ],
                "variants": ["cross", "canadian"]
            },
            "binutils": {
                "commands": [
                    "${CONFIGURE} ${ALL_TOOLS} --build=${BUILD} --host=${HOST} --target=${TARGET} CXXFLAGS='-std=gnu++98' --prefix=${DIR_TOOLCHAIN} ${SYSROOT_BINUTILS_FLAGS} --disable-nls --disable-static --enable-64-bit-bfd --disable-werror --enable-plugins --enable-gold --with-lib-path=\"=/lib32:=/usr/lib32:=/lib64:=/usr/lib64\"",
                    "make -j${NUM_CPU}",
                    "make install"
                ],
                "variants": ["cross", "canadian"]
            },
            "gcc_stage1": {
                "commands": [
                    "mkdir -p ${DIR_SYSROOT_STAGE1}/usr/lib32 ${DIR_SYSROOT}/usr/lib ${DIR_SYSROOT}/lib",
                    "${CONFIGURE} ${ALL_TOOLS} --build=${BUILD} --host=${HOST} --target=${TARGET} --prefix=${DIR_TOOLCHAIN_STAGE1} --with-sysroot=${DIR_SYSROOT_STAGE1} --with-native-system-header-dir=/usr/include --with-mpfr=${DIR_MPFR_INSTALL} --with-gmp=${DIR_GMP_INSTALL} --with-mpc=${DIR_MPC_INSTALL} --disable-nls --disable-shared --without-cloog --without-isl --without-headers --with-newlib --disable-decimal-float --disable-libgomp --disable-libmudflap --disable-libssp --disable-libatomic --disable-libitm --disable-libsanitizer --disable-libquadmath --disable-threads --enable-languages=c --enable-checking=release --disable-bootstrap ${MULTILIB_FLAGS} --disable-werror",
                    "make -j${NUM_CPU} all-gcc all-target-libgcc",
                    "make install-gcc install-target-libgcc"
                ],
                "variants": ["cross"]
            },
            "glibc": {
                "multi_commands": [
                    [
                     "${BOOTSTRAP_LN_32}",
                     "echo 'slibdir=${DIR_SYSROOT_PREFIX}/lib32' > configparms",
                     "echo 'rtlddir=${DIR_SYSROOT_PREFIX}/lib32' >> configparms",
                     "${CONFIGURE} BUILD_CC='x86_64_build-unknown-linux-gnu-gcc' CC=\"${TARGET_GCC} -m32\" --prefix=${DIR_SYSROOT_PREFIX} --libdir=${DIR_SYSROOT_PREFIX}/lib32 --with-headers=${DIR_SYSROOT_WITH_PREFIX}/include --disable-profile --enable-kernel=2.6.32 i686-linux-gnu libc_cv_ssp=no libc_cv_ssp_strong=no cross_compiling=yes libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes",
                     "make -j${NUM_CPU}",
                     "make install_root=${DIR_SYSROOT} install"],
                    [
                     "${BOOTSTRAP_LN_64}",
                     "echo 'slibdir=${DIR_SYSROOT_PREFIX}/lib64' > configparms",
                     "echo 'rtlddir=${DIR_SYSROOT_PREFIX}/lib64' >> configparms",
                     "${CONFIGURE} BUILD_CC='x86_64_build-unknown-linux-gnu-gcc' CC=\"${TARGET_GCC}\" --prefix=${DIR_SYSROOT_PREFIX} --libdir=${DIR_SYSROOT_PREFIX}/lib64 --with-headers=${DIR_SYSROOT_WITH_PREFIX}/include --disable-profile --enable-kernel=2.6.32 libc_cv_ssp=no libc_cv_ssp_strong=no cross_compiling=yes libc_cv_forced_unwind=yes libc_cv_c_cleanup=yes",
                     "make -j${NUM_CPU}",
                     "make install_root=${DIR_SYSROOT} install"]
                ],
                "variants": ["cross", "canadian"]
            },
            "gcc": {
                "commands": [
                    "${MAKE_LIB_DIR}",
                    "${CONFIGURE} ${ALL_TOOLS} --build=${BUILD} --host=${HOST} --target=${TARGET} --prefix=${DIR_TOOLCHAIN} ${SYSROOT_FLAGS} --with-mpfr=${DIR_MPFR_INSTALL} --with-gmp=${DIR_GMP_INSTALL} --with-mpc=${DIR_MPC_INSTALL} --with-pkgversion=${PKGVERSION} --without-cloog --without-isl --disable-nls --enable-languages=c,c++,d --enable-checking=release --enable-__cxa_atexit --enable-threads=posix ${MULTILIB_FLAGS} ${BUGURL} --disable-bootstrap --enable-lto --disable-werror --without-libatomic",
                    "make -j${NUM_CPU}",
                    "make install"
                ]
            },

            "cleanup": {
                "commands": [
                    "if [ -e bin/gcc ]; then ln -s gcc bin/cc; fi;",
                    "if [ -e bin/gcc.exe ]; then ln -s gcc.exe bin/cc.exe; fi;",
                    "if [ -e bin/${TARGET}-gcc ]; then ln -s ${TARGET}-gcc bin/${TARGET}-cc; fi;",
                    "if [ -e bin/${TARGET}-gcc.exe ]; then ln -s ${TARGET}-gcc.exe bin/${TARGET}-cc.exe; fi;"
                ]
            }
        }
    }
}
